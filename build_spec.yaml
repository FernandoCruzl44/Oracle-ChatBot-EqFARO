version: 0.1
component: build
timeoutInSeconds: 1800
runAs: root
shell: bash
env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axco8elk7e3y"
    RUN_NAME: "faro"
    IMAGE_NAME: "oraclechatbot"
    COMPARTMENT_OCID: "ocid1.compartment.oc1..aaaaaaaaxtitswqnld7pbe2jep4aegof5f44dz63enrnqe4ypfx4gt2tqbpa"

steps:
  - type: Command
    name: "Install dependencies"
    command: |
      yum update -y
      yum install -y curl jq openssl git

      # Print environment info for debugging
      echo "OCI Environment Variables:"
      echo "COMPARTMENT_OCID=${COMPARTMENT_OCID}"

  - type: Command
    name: "Build Docker image"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/MtdrSpring/services

      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la

      # Verify that Dockerfile.deploy exists
      if [ ! -f "Dockerfile.deploy" ]; then
        echo "ERROR: Dockerfile.deploy not found in current directory"
        exit 1
      fi

      echo "Using multi-stage Dockerfile.deploy for build process..."

      # Fetch .env file from Vault
      echo "Fetching .env file from Vault secret..."
      ENV_SECRET_OCID="ocid1.vaultsecret.oc1.mx-queretaro-1.amaaaaaag3xcsfyamygsyrldfwqd4hdg3dxedqlpwjoyxv24ua2ynxfaopfa"

      # Use the correct command to get the secret
      SECRET_CONTENT=$(oci secrets secret-bundle get \
        --secret-id ${ENV_SECRET_OCID} \
        --query "data.\"secret-bundle-content\".content" \
        --raw-output | base64 -d)

      if [ -z "$SECRET_CONTENT" ]; then
        echo "ERROR: Failed to retrieve secret content"
        exit 1
      fi

      # Write the content to .env file
      echo "$SECRET_CONTENT" > .env
      echo ".env file created with content length: $(wc -c < .env) bytes"

      # Extract Docker credentials from .env file - using grep with better handling of special characters
      OCI_REGION=$(grep -o 'oci_region="[^"]*"' .env | awk -F'"' '{print $2}' || echo "${REGISTRY}")
      OCI_USERNAME=$(grep -o 'oci_username="[^"]*"' .env | awk -F'"' '{print $2}' || echo "axco8elk7e3y/a01285574@tec.mx")
      OCI_TOKEN=$(grep -o 'oci_token="[^"]*"' .env | awk -F'"' '{print $2}' || echo "")

      # Verify credentials were extracted
      echo "OCI Registry: ${OCI_REGION#https://}" # Remove https:// if present
      echo "OCI Username: ${OCI_USERNAME}"
      if [ -n "$OCI_TOKEN" ]; then
        echo "OCI Token: [Token Found - Length: ${#OCI_TOKEN} chars]"
      else
        echo "ERROR: OCI token not found in .env file"
      fi

      # Download wallet from Object Storage
      echo "Downloading wallet from Object Storage..."
      NAMESPACE="axco8elk7e3y"
      BUCKET_NAME="reacttodo-1flb5"
      WALLET_OBJECT_NAME="wallet.zip"

      # Create wallet directory
      mkdir -p wallet

      # Download wallet zip using OCI CLI
      echo "Executing OS object get command..."
      oci os object get \
        --namespace $NAMESPACE \
        --bucket-name $BUCKET_NAME \
        --name $WALLET_OBJECT_NAME \
        --file wallet.zip

      # Check if download was successful
      if [ $? -ne 0 ]; then
        echo "ERROR: Failed to download wallet.zip from Object Storage"
        # Continue without wallet (don't exit)
      else
        # Unzip the wallet if download was successful
        echo "Unzipping wallet..."
        unzip -o wallet.zip -d wallet/
        
        # Cleanup
        rm wallet.zip
        
        echo "Wallet extracted to wallet/ directory"
        ls -la wallet/
      fi

      # Set up variables for image and repository
      REGISTRY_HOST=${OCI_REGION#https://}  # Remove https:// if present
      REPO_PATH="${RUN_NAME}/${IMAGE_NAME}"
      FULL_IMAGE_PATH="${REGISTRY_HOST}/${NAMESPACE}/${REPO_PATH}:latest"

      echo "Repository path: ${REPO_PATH}"
      echo "Full image path: ${FULL_IMAGE_PATH}"

      echo "Debugging wallet directory contents:"
      find wallet -type f | sort
      echo "Contents of a sample wallet file:"
      head -n 5 wallet/wallet/tnsnames.ora || echo "File not found or empty"

      # Build with Docker using Dockerfile.deploy
      echo "Building Docker image using Dockerfile.deploy..."
      docker build -f Dockerfile.deploy -t faroimage .

      # Check if build was successful
      if [ $? -ne 0 ]; then
        echo "ERROR: Docker build failed"
        exit 1
      fi

      # Tag with full path including 'latest' tag
      echo "Tagging image: $FULL_IMAGE_PATH"
      docker tag faroimage "${FULL_IMAGE_PATH}"

      # Verify the image exists
      docker images | grep faroimage

      # Create a .docker/config.json file directly - this avoids the need for docker login
      mkdir -p ~/.docker
      # Create a base64 encoded auth string
      AUTH_STRING=$(echo -n "${OCI_USERNAME}:${OCI_TOKEN}" | base64 | tr -d '\n')

      # Create the Docker config JSON with proper escaping
      cat > ~/.docker/config.json << EOF
      {
        "auths": {
          "${REGISTRY_HOST}": {
            "auth": "${AUTH_STRING}"
          }
        }
      }
      EOF

      echo "Created Docker auth config file"

      # Save variables for later steps (escaping special characters)
      echo "FULL_IMAGE_PATH=\"$FULL_IMAGE_PATH\"" > env_vars_file
      echo "COMPARTMENT_OCID=\"$COMPARTMENT_OCID\"" >> env_vars_file
      echo "REGISTRY_HOST=\"$REGISTRY_HOST\"" >> env_vars_file
      echo "REPO_PATH=\"$REPO_PATH\"" >> env_vars_file
      echo "NAMESPACE=\"$NAMESPACE\"" >> env_vars_file

  - type: Command
    name: "Delete, Recreate Repository and Push Image"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/MtdrSpring/services
      source env_vars_file

      echo "Working with repository: $REPO_PATH"

      # Check if the image exists locally
      if ! docker inspect "${FULL_IMAGE_PATH}" &>/dev/null; then
        echo "ERROR: Docker image ${FULL_IMAGE_PATH} does not exist locally"
        docker images
        exit 1
      fi

      echo "============ REPOSITORY MANAGEMENT ============"

      # Step 1: List repositories to find if it exists
      echo "Checking if repository exists: ${REPO_PATH}"
      REPO_LIST=$(oci artifacts container repository list \
          --compartment-id "${COMPARTMENT_OCID}" \
          --display-name "${REPO_PATH}" \
          --output json)

      # Extract OCID of matching repos
      MATCHING_REPOS=$(echo "$REPO_LIST" | jq -r '.data.items[] | select(."display-name" == "'${REPO_PATH}'") | .id')

      # Step 2: Delete the repository if it exists
      if [ -n "$MATCHING_REPOS" ]; then
          echo "Found matching repository with OCID(s): $MATCHING_REPOS"
          for REPO_OCID in $MATCHING_REPOS; do
              echo "Deleting repository with OCID $REPO_OCID..."
              oci artifacts container repository delete \
                  --repository-id "$REPO_OCID" \
                  --force || echo "Error deleting repository, continuing..."
              
              # Wait for deletion to complete
              echo "Waiting for repository deletion to complete..."
              sleep 15
          done
      else
          echo "No existing repositories found matching $REPO_PATH."
      fi

      # Step 3: Create the repository
      echo "Creating new repository: ${REPO_PATH}"
      oci artifacts container repository create \
          --compartment-id "${COMPARTMENT_OCID}" \
          --display-name "${REPO_PATH}" \
          --is-public true

      if [ $? -ne 0 ]; then
          echo "Repository creation might have failed. Will attempt push anyway."
      else
          echo "Repository created successfully."
      fi

      # Wait a moment for repository to be fully ready
      sleep 5

      echo "============ IMAGE PUSH ============"

      # Push the image with the latest tag
      echo "Pushing image to OCI registry: $FULL_IMAGE_PATH"
      docker push "${FULL_IMAGE_PATH}"

      # Check push status
      if [ $? -eq 0 ]; then
        echo "Image successfully pushed to container repository"
        echo "Repository: ${REPO_PATH}"
        echo "Full image path: ${FULL_IMAGE_PATH}"
      else
        echo "ERROR: Failed to push image to container repository"
        exit 1
      fi

    onFailure:
      - type: Command
        command: |
          echo "Docker image push failed. Printing debug information..."
          docker images
          echo "COMPARTMENT_OCID: ${COMPARTMENT_OCID}"
          echo "Checking Docker authentication config:"
          if [ -f ~/.docker/config.json ]; then
            cat ~/.docker/config.json | grep -v auth | grep -v password
          else
            echo "No Docker config file found"
          fi
          echo "Attempting to list repositories to check permissions:"
          oci artifacts container repository list --compartment-id "${COMPARTMENT_OCID}" --limit 5 --output table
